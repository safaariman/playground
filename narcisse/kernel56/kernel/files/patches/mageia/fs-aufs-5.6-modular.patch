
 fs/aufs/Kconfig          |    2 +-
 fs/dcache.c              |    2 ++
 fs/exec.c                |    1 +
 fs/fcntl.c               |    1 +
 fs/file_table.c          |    2 ++
 fs/inode.c               |    1 +
 fs/namespace.c           |    3 +++
 fs/notify/group.c        |    1 +
 fs/open.c                |    1 +
 fs/read_write.c          |    4 ++++
 fs/splice.c              |    2 ++
 fs/sync.c                |    1 +
 fs/xattr.c               |    1 +
 kernel/locking/lockdep.c |    1 +
 kernel/task_work.c       |    1 +
 security/security.c      |    8 ++++++++
 16 files changed, 31 insertions(+), 1 deletion(-)

diff -Nurp linux-5.6.3-aufs/fs/aufs/Kconfig linux-5.6.3-aufs-mod/fs/aufs/Kconfig
--- linux-5.6.3-aufs/fs/aufs/Kconfig	2020-04-10 12:40:52.187049268 +0300
+++ linux-5.6.3-aufs-mod/fs/aufs/Kconfig	2020-04-10 13:15:44.979742386 +0300
@@ -1,6 +1,6 @@
 # SPDX-License-Identifier: GPL-2.0
 config AUFS_FS
-	bool "Aufs (Advanced multi layered unification filesystem) support"
+	tristate "Aufs (Advanced multi layered unification filesystem) support"
 	help
 	Aufs is a stackable unification filesystem such as Unionfs,
 	which unifies several directories and provides a merged single
diff -Nurp linux-5.6.3-aufs/fs/dcache.c linux-5.6.3-aufs-mod/fs/dcache.c
--- linux-5.6.3-aufs/fs/dcache.c	2020-04-10 12:40:52.194049596 +0300
+++ linux-5.6.3-aufs-mod/fs/dcache.c	2020-04-10 13:15:44.979742386 +0300
@@ -1371,6 +1371,7 @@ rename_retry:
 	seq = 1;
 	goto again;
 }
+EXPORT_SYMBOL_GPL(d_walk);
 
 struct check_mount {
 	struct vfsmount *mnt;
@@ -2916,6 +2917,7 @@ void d_exchange(struct dentry *dentry1,
 
 	write_sequnlock(&rename_lock);
 }
+EXPORT_SYMBOL_GPL(d_exchange);
 
 /**
  * d_ancestor - search for an ancestor
diff -Nurp linux-5.6.3-aufs/fs/exec.c linux-5.6.3-aufs-mod/fs/exec.c
--- linux-5.6.3-aufs/fs/exec.c	2020-03-30 01:25:41.000000000 +0300
+++ linux-5.6.3-aufs-mod/fs/exec.c	2020-04-10 13:15:44.979742386 +0300
@@ -109,6 +109,7 @@ bool path_noexec(const struct path *path
 	return (path->mnt->mnt_flags & MNT_NOEXEC) ||
 	       (path->mnt->mnt_sb->s_iflags & SB_I_NOEXEC);
 }
+EXPORT_SYMBOL_GPL(path_noexec);
 
 #ifdef CONFIG_USELIB
 /*
diff -Nurp linux-5.6.3-aufs/fs/fcntl.c linux-5.6.3-aufs-mod/fs/fcntl.c
--- linux-5.6.3-aufs/fs/fcntl.c	2020-04-10 12:40:52.194049596 +0300
+++ linux-5.6.3-aufs-mod/fs/fcntl.c	2020-04-10 13:15:44.979742386 +0300
@@ -85,6 +85,7 @@ int setfl(int fd, struct file *filp, uns
  out:
 	return error;
 }
+EXPORT_SYMBOL_GPL(setfl);
 
 static void f_modown(struct file *filp, struct pid *pid, enum pid_type type,
                      int force)
diff -Nurp linux-5.6.3-aufs/fs/file_table.c linux-5.6.3-aufs-mod/fs/file_table.c
--- linux-5.6.3-aufs/fs/file_table.c	2020-03-30 01:25:41.000000000 +0300
+++ linux-5.6.3-aufs-mod/fs/file_table.c	2020-04-10 13:15:44.979742386 +0300
@@ -162,6 +162,7 @@ over:
 	}
 	return ERR_PTR(-ENFILE);
 }
+EXPORT_SYMBOL_GPL(alloc_empty_file);
 
 /*
  * Variant of alloc_empty_file() that doesn't check and modify nr_files.
@@ -375,6 +376,7 @@ void __fput_sync(struct file *file)
 }
 
 EXPORT_SYMBOL(fput);
+EXPORT_SYMBOL_GPL(__fput_sync);
 
 void __init files_init(void)
 {
diff -Nurp linux-5.6.3-aufs/fs/inode.c linux-5.6.3-aufs-mod/fs/inode.c
--- linux-5.6.3-aufs/fs/inode.c	2020-04-10 12:40:52.194049596 +0300
+++ linux-5.6.3-aufs-mod/fs/inode.c	2020-04-10 13:15:44.980742432 +0300
@@ -1694,6 +1694,7 @@ int update_time(struct inode *inode, str
 		return inode->i_op->update_time(inode, time, flags);
 	return generic_update_time(inode, time, flags);
 }
+EXPORT_SYMBOL_GPL(update_time);
 
 /**
  *	touch_atime	-	update the access time
diff -Nurp linux-5.6.3-aufs/fs/namespace.c linux-5.6.3-aufs-mod/fs/namespace.c
--- linux-5.6.3-aufs/fs/namespace.c	2020-04-10 12:40:52.194049596 +0300
+++ linux-5.6.3-aufs-mod/fs/namespace.c	2020-04-10 13:15:44.980742432 +0300
@@ -431,6 +431,7 @@ void __mnt_drop_write(struct vfsmount *m
 	mnt_dec_writers(real_mount(mnt));
 	preempt_enable();
 }
+EXPORT_SYMBOL_GPL(__mnt_drop_write);
 
 /**
  * mnt_drop_write - give up write access to a mount
@@ -781,6 +782,7 @@ int is_current_mnt_ns(struct vfsmount *m
 {
 	return check_mnt(real_mount(mnt));
 }
+EXPORT_SYMBOL_GPL(is_current_mnt_ns);
 
 /*
  * vfsmount lock must be held for write
@@ -1903,6 +1905,7 @@ int iterate_mounts(int (*f)(struct vfsmo
 	}
 	return 0;
 }
+EXPORT_SYMBOL_GPL(iterate_mounts);
 
 static void lock_mnt_tree(struct mount *mnt)
 {
diff -Nurp linux-5.6.3-aufs/fs/notify/group.c linux-5.6.3-aufs-mod/fs/notify/group.c
--- linux-5.6.3-aufs/fs/notify/group.c	2020-03-30 01:25:41.000000000 +0300
+++ linux-5.6.3-aufs-mod/fs/notify/group.c	2020-04-10 13:15:44.980742432 +0300
@@ -99,6 +99,7 @@ void fsnotify_get_group(struct fsnotify_
 {
 	refcount_inc(&group->refcnt);
 }
+EXPORT_SYMBOL_GPL(fsnotify_get_group);
 
 /*
  * Drop a reference to a group.  Free it if it's through.
diff -Nurp linux-5.6.3-aufs/fs/open.c linux-5.6.3-aufs-mod/fs/open.c
--- linux-5.6.3-aufs/fs/open.c	2020-03-30 01:25:41.000000000 +0300
+++ linux-5.6.3-aufs-mod/fs/open.c	2020-04-10 13:15:44.980742432 +0300
@@ -65,6 +65,7 @@ int do_truncate(struct dentry *dentry, l
 	inode_unlock(dentry->d_inode);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(do_truncate);
 
 long vfs_truncate(const struct path *path, loff_t length)
 {
diff -Nurp linux-5.6.3-aufs/fs/read_write.c linux-5.6.3-aufs-mod/fs/read_write.c
--- linux-5.6.3-aufs/fs/read_write.c	2020-04-10 12:40:52.194049596 +0300
+++ linux-5.6.3-aufs-mod/fs/read_write.c	2020-04-10 13:15:44.981742479 +0300
@@ -468,6 +468,7 @@ ssize_t vfs_read(struct file *file, char
 
 	return ret;
 }
+EXPORT_SYMBOL_GPL(vfs_read);
 
 static ssize_t new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
 {
@@ -508,6 +509,7 @@ vfs_readf_t vfs_readf(struct file *file)
 		return new_sync_read;
 	return ERR_PTR(-ENOSYS); /* doesn't have ->read(|_iter)() op */
 }
+EXPORT_SYMBOL_GPL(vfs_readf);
 
 vfs_writef_t vfs_writef(struct file *file)
 {
@@ -519,6 +521,7 @@ vfs_writef_t vfs_writef(struct file *fil
 		return new_sync_write;
 	return ERR_PTR(-ENOSYS); /* doesn't have ->write(|_iter)() op */
 }
+EXPORT_SYMBOL_GPL(vfs_writef);
 
 ssize_t __kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)
 {
@@ -588,6 +591,7 @@ ssize_t vfs_write(struct file *file, con
 
 	return ret;
 }
+EXPORT_SYMBOL_GPL(vfs_write);
 
 /* file_ppos returns &file->f_pos or NULL if file is stream */
 static inline loff_t *file_ppos(struct file *file)
diff -Nurp linux-5.6.3-aufs/fs/splice.c linux-5.6.3-aufs-mod/fs/splice.c
--- linux-5.6.3-aufs/fs/splice.c	2020-04-10 12:40:52.194049596 +0300
+++ linux-5.6.3-aufs-mod/fs/splice.c	2020-04-10 13:15:44.981742479 +0300
@@ -862,6 +862,7 @@ long do_splice_from(struct pipe_inode_in
 
 	return splice_write(pipe, out, ppos, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_from);
 
 /*
  * Attempt to initiate a splice from a file to a pipe.
@@ -891,6 +892,7 @@ long do_splice_to(struct file *in, loff_
 
 	return splice_read(in, ppos, pipe, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_to);
 
 /**
  * splice_direct_to_actor - splices data directly between two non-pipes
diff -Nurp linux-5.6.3-aufs/fs/sync.c linux-5.6.3-aufs-mod/fs/sync.c
--- linux-5.6.3-aufs/fs/sync.c	2020-04-10 12:40:52.194049596 +0300
+++ linux-5.6.3-aufs-mod/fs/sync.c	2020-04-10 13:15:44.981742479 +0300
@@ -39,6 +39,7 @@ int __sync_filesystem(struct super_block
 		sb->s_op->sync_fs(sb, wait);
 	return __sync_blockdev(sb->s_bdev, wait);
 }
+EXPORT_SYMBOL_GPL(__sync_filesystem);
 
 /*
  * Write out and wait upon all dirty data associated with this
diff -Nurp linux-5.6.3-aufs/fs/xattr.c linux-5.6.3-aufs-mod/fs/xattr.c
--- linux-5.6.3-aufs/fs/xattr.c	2020-03-30 01:25:41.000000000 +0300
+++ linux-5.6.3-aufs-mod/fs/xattr.c	2020-04-10 13:15:44.981742479 +0300
@@ -296,6 +296,7 @@ vfs_getxattr_alloc(struct dentry *dentry
 	*xattr_value = value;
 	return error;
 }
+EXPORT_SYMBOL_GPL(vfs_getxattr_alloc);
 
 ssize_t
 __vfs_getxattr(struct dentry *dentry, struct inode *inode, const char *name,
diff -Nurp linux-5.6.3-aufs/kernel/locking/lockdep.c linux-5.6.3-aufs-mod/kernel/locking/lockdep.c
--- linux-5.6.3-aufs/kernel/locking/lockdep.c	2020-04-10 12:40:52.195049643 +0300
+++ linux-5.6.3-aufs-mod/kernel/locking/lockdep.c	2020-04-10 13:15:44.982742525 +0300
@@ -174,6 +174,7 @@ inline struct lock_class *lockdep_hlock_
 	 */
 	return lock_classes + class_idx;
 }
+EXPORT_SYMBOL_GPL(lockdep_hlock_class);
 #define hlock_class(hlock) lockdep_hlock_class(hlock)
 
 #ifdef CONFIG_LOCK_STAT
diff -Nurp linux-5.6.3-aufs/kernel/task_work.c linux-5.6.3-aufs-mod/kernel/task_work.c
--- linux-5.6.3-aufs/kernel/task_work.c	2020-03-30 01:25:41.000000000 +0300
+++ linux-5.6.3-aufs-mod/kernel/task_work.c	2020-04-10 13:15:44.982742525 +0300
@@ -116,3 +116,4 @@ void task_work_run(void)
 		} while (work);
 	}
 }
+EXPORT_SYMBOL_GPL(task_work_run);
diff -Nurp linux-5.6.3-aufs/security/security.c linux-5.6.3-aufs-mod/security/security.c
--- linux-5.6.3-aufs/security/security.c	2020-03-30 01:25:41.000000000 +0300
+++ linux-5.6.3-aufs-mod/security/security.c	2020-04-10 13:15:44.982742525 +0300
@@ -1068,6 +1068,7 @@ int security_path_rmdir(const struct pat
 		return 0;
 	return call_int_hook(path_rmdir, 0, dir, dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_rmdir);
 
 int security_path_unlink(const struct path *dir, struct dentry *dentry)
 {
@@ -1084,6 +1085,7 @@ int security_path_symlink(const struct p
 		return 0;
 	return call_int_hook(path_symlink, 0, dir, dentry, old_name);
 }
+EXPORT_SYMBOL_GPL(security_path_symlink);
 
 int security_path_link(struct dentry *old_dentry, const struct path *new_dir,
 		       struct dentry *new_dentry)
@@ -1092,6 +1094,7 @@ int security_path_link(struct dentry *ol
 		return 0;
 	return call_int_hook(path_link, 0, old_dentry, new_dir, new_dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_link);
 
 int security_path_rename(const struct path *old_dir, struct dentry *old_dentry,
 			 const struct path *new_dir, struct dentry *new_dentry,
@@ -1119,6 +1122,7 @@ int security_path_truncate(const struct
 		return 0;
 	return call_int_hook(path_truncate, 0, path);
 }
+EXPORT_SYMBOL_GPL(security_path_truncate);
 
 int security_path_chmod(const struct path *path, umode_t mode)
 {
@@ -1126,6 +1130,7 @@ int security_path_chmod(const struct pat
 		return 0;
 	return call_int_hook(path_chmod, 0, path, mode);
 }
+EXPORT_SYMBOL_GPL(security_path_chmod);
 
 int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
 {
@@ -1133,6 +1138,7 @@ int security_path_chown(const struct pat
 		return 0;
 	return call_int_hook(path_chown, 0, path, uid, gid);
 }
+EXPORT_SYMBOL_GPL(security_path_chown);
 
 int security_path_chroot(const struct path *path)
 {
@@ -1233,6 +1239,7 @@ int security_inode_permission(struct ino
 		return 0;
 	return call_int_hook(inode_permission, 0, inode, mask);
 }
+EXPORT_SYMBOL_GPL(security_inode_permission);
 
 int security_inode_setattr(struct dentry *dentry, struct iattr *attr)
 {
@@ -1410,6 +1417,7 @@ int security_file_permission(struct file
 
 	return fsnotify_perm(file, mask);
 }
+EXPORT_SYMBOL_GPL(security_file_permission);
 
 int security_file_alloc(struct file *file)
 {
